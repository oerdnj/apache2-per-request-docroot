#! /bin/sh /usr/share/dpatch/dpatch-run
## 203_suexec-custom.dpatch by Ondřej Surý <ondrej@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: the patch to make document root per request variable

@DPATCH@
Index: server/core.c
===================================================================
--- trunk~/server/core.c	(revision 960840)
+++ trunk/server/core.c	(working copy)
@@ -717,11 +717,15 @@
 AP_DECLARE(const char *) ap_document_root(request_rec *r) /* Don't use this! */
 {
     core_server_config *conf;
+    if (r->document_root == NULL) {
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,
+		      "ap_document_root: r->document_root is not set");
+	conf = (core_server_config *)ap_get_module_config(r->server->module_config,
+							  &core_module);
+	return conf->ap_document_root;
+    }
 
-    conf = (core_server_config *)ap_get_module_config(r->server->module_config,
-                                                      &core_module);
-
-    return conf->ap_document_root;
+    return r->document_root;
 }
 
 AP_DECLARE(const apr_array_header_t *) ap_requires(request_rec *r)
@@ -3517,7 +3521,7 @@
         while (*path == '/') {
             ++path;
         }
-        if ((rv = apr_filepath_merge(&r->filename, conf->ap_document_root, path,
+        if ((rv = apr_filepath_merge(&r->filename, ap_document_root(r), path,
                                      APR_FILEPATH_TRUENAME
                                    | APR_FILEPATH_SECUREROOT, r->pool))
                     != APR_SUCCESS) {
@@ -3540,7 +3544,7 @@
         while (*path == '/') {
             ++path;
         }
-        if ((rv = apr_filepath_merge(&r->filename, conf->ap_document_root, path,
+        if ((rv = apr_filepath_merge(&r->filename, ap_document_root(r), path,
                                      APR_FILEPATH_TRUENAME
                                    | APR_FILEPATH_SECUREROOT, r->pool))
                     != APR_SUCCESS) {
Index: server/protocol.c
===================================================================
--- trunk~/server/protocol.c	(revision 960840)
+++ trunk/server/protocol.c	(working copy)
@@ -843,6 +843,7 @@
     apr_bucket_brigade *tmp_bb;
     apr_socket_t *csd;
     apr_interval_time_t cur_timeout;
+    core_server_config *server_conf;
 
     apr_pool_create(&p, conn->pool);
     apr_pool_tag(p, "request");
@@ -885,6 +886,12 @@
      */
     r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;
 
+    /* Clone DocumentRoot so it can be changed per request
+     */
+    server_conf = (core_server_config *)ap_get_module_config(r->server->module_config,
+							     &core_module);
+    r->document_root  = server_conf->ap_document_root;
+
     tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);
 
     /* Get the request... */
Index: server/request.c
===================================================================
--- trunk~/server/request.c	(revision 960840)
+++ trunk/server/request.c	(working copy)
@@ -1587,6 +1587,10 @@
      */
     rnew->used_path_info = AP_REQ_DEFAULT_PATH_INFO;
 
+    /* Copy DocumentRoot to sub-request
+     */
+    rnew->document_root  = r->document_root;
+
     return rnew;
 }
 
Index: modules/http/http_request.c
===================================================================
--- trunk~/modules/http/http_request.c	(revision 960840)
+++ trunk/modules/http/http_request.c	(working copy)
@@ -402,6 +402,8 @@
     new->output_filters  = new->proto_output_filters;
     new->input_filters   = new->proto_input_filters;
 
+    new->document_root   = r->document_root;
+
     if (new->main) {
         /* Add back the subrequest filter, which we lost when
          * we set output_filters to include only the protocol
Index: modules/mappers/mod_vhost_alias.c
===================================================================
--- trunk~/modules/mappers/mod_vhost_alias.c	(revision 960840)
+++ trunk/modules/mappers/mod_vhost_alias.c	(working copy)
@@ -373,11 +373,12 @@
     }
 
     if (r->filename) {
-        r->filename = apr_pstrcat(r->pool, r->filename, buf, uri, NULL);
+	r->document_root = apr_pstrcat(r->pool, r->filename, buf, NULL);
     }
     else {
-        r->filename = apr_pstrcat(r->pool, buf, uri, NULL);
+	r->document_root = apr_pstrdup(r->pool, buf);
     }
+    r->filename = apr_pstrcat(r->pool, r->document_root, uri, NULL);
 }
 
 static int mva_translate(request_rec *r)
Index: include/httpd.h
===================================================================
--- trunk~/include/httpd.h	(revision 960840)
+++ trunk/include/httpd.h	(working copy)
@@ -999,6 +999,9 @@
     /** A flag to determine if the eos bucket has been sent yet */
     int eos_sent;
 
+    /** Where is the per requests document root **/
+    const char *document_root;
+
 /* Things placed at the end of the record to avoid breaking binary
  * compatibility.  It would be nice to remember to reorder the entire
  * record to improve 64bit alignment the next time we need to break
